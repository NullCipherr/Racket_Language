#lang racket

; Dados Compostos

; Estamos interessados em representar dados onde dois ou mais valores devem ficar juntos.
; A solução para isso são as estruturas.

; Forma especial -> struct
; Sintaxe -> (struct <id-estrutura> (<id-campo> parametro_1 ... parametro_n))

; Vamos definir uma estrutura de um ponto no plano cartesiano.
(struct ponto (x y))

; Faz a definição do ponto 1, utilizando a estrutura de ponto.
(define p1 (ponto 2 3))

(display "Coordenada x de p1 -> ")
(display (ponto-x p1))

; Função utilizada para inserir uma nova linha entre as duas strings exibidas
(newline)

(display "Coordenada y de p1 -> ")
(display (ponto-y p1))

; ----------------------------------------------------------------------------------------------------------------- ;

; Estruturas Transparente

(struct ponto-transparent (x y) #:transparent)
(define p2 (ponto-transparent 3 4))

(newline)(newline)
(display "Estrutura Ponto 1 -> ")(display p1)
(newline)
(display "Estrutura Ponto 2 -> ")(display p2)


; Copiando uma estrutura
; Criando uma instância da estrutura
(define p3 (ponto 2 3))

; Exibindo os valores originais
(displayln "Valores originais:")
(displayln (format "x: ~a, y: ~a" (ponto-x p3) (ponto-y p3)))

; Criando uma cópia modificada
(define p2 (struct-copy ponto p1 [x 5]))

; Exibindo os valores da cópia modificada
(displayln "\nValores da cópia modificada:")
(displayln (format "x: ~a, y: ~a" (ponto-x p2) (ponto-y p2)))
